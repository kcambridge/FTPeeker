@model FTPeeker.Models.ViewModels.VMBrowse
@using GridMvc.Html


@{
    ViewBag.Title = "Browse";
}
<br />
<h3>@Html.ActionLink("FTP Sites","Index") / @Model.siteName</h3>
<br />
@if (Model.errorMessage != "")
{
    <div class="alert alert-danger col-md-4" role="alert" align="center">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <strong>@Model.errorMessage</strong>
    </div>
}
<a href="@Url.Action("Upload",new {id = Model.id, path= Model.path})" class="btn btn-default"> <span class="glyphicon glyphicon-upload"></span>&nbsp; Upload File</a>
<br />
<br />
@if (Model.navLinks != null)
{
    <ol class="breadcrumb">
        @foreach (var l in Model.navLinks)
        {
            if (l.isFirst)
            {
                <li>
                    <a href="@Url.Action("Browse", new { id = Model.id, path = Model.previousPath })">
                        <span class="glyphicon glyphicon-arrow-up"></span><span class="glyphicon glyphicon-folder-open"></span>
                    </a> &nbsp; 
                    @if (l.isLast)
                    {
                        @l.displayText
                    }
                    else
                    {
                        <a href="@Url.Action("Browse",new {id = Model.id, path = l.path})">@l.displayText</a>
                    }
                     
                </li>
            }
            else if (l.isLast)
            {
                <li> @l.displayText </li>
            }
            else
            {
                <li><a href="@Url.Action("Browse",new {id = Model.id, path = l.path})">@l.displayText</a></li>    
            }
        }
    </ol>
}
@if (Model.items != null)
{
    @Html.Grid(Model.items).Columns(columns =>
        {

            columns.Add(model => model.typeSequence).Titled("File Type").Filterable(false).Sortable(true).SetWidth(100)
                .Sanitized(false).Encoded(false).RenderValueAs(c => @<div>
                    @if (c.isFolder())
                    {
                        <span class="glyphicon glyphicon-folder-open"></span>
                    }
                    else
                    {
                        <span class="glyphicon glyphicon-file"></span>
                    }
                </div>);
            columns.Add(model => model.name).Titled("File Name").Filterable(true).Sortable(true).Encoded(false).Sanitized(false)
                .RenderValueAs(c => @<div>
                    @if (c.isFolder())
                    {
                        @Html.ActionLink(c.name, "Browse", new { id = Model.id, path = c.path })
                    }
                    else
                    {
                        <a href="@Url.Action("Download", new {id = Model.id, remoteDir = c.directory, fileName = c.name })" target="_blank">@c.name</a>
                    }
                </div>);        
            columns.Add(model => model.size).Titled("Size").Filterable(true).Sortable(true).Encoded(false).Sanitized(false)
                .RenderValueAs(c => @<div>
                    @if (c.isFile())
                    {
                        <span>@String.Format("{0:n0}", c.size) Bytes</span>
                    }
                </div>);
            columns.Add(model => model.lastModified).Titled("Modified").Filterable(true).Sortable(true).Encoded(false).Sanitized(false)
                .RenderValueAs(c => @<div>
                    @if (c.isFile())
                    {
                        <span>@c.lastModified.ToString("MM/dd/yyyy HH:mm")</span>
                    }
                </div>);
        })
}


    
